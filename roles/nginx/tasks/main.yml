- name: install nginx
  ansible.builtin.apt:
    name: nginx
    state: latest

- name: enable nginx service
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: yes

- name: disable default host
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify:
  - restart nginx

- name: create directory for acme.sh
  ansible.builtin.file:
    path: /opt/acme.sh
    state: directory
    owner: root
    mode: '0700'

- name: download acme.sh
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/acmesh-official/acme.sh/master/acme.sh
    dest: /opt/acme.sh/acme.sh
    owner: root
    mode: '0700'

- name: create dnsapi directory
  ansible.builtin.file:
    path: /opt/acme.sh/dnsapi
    state: directory
    owner: root
    mode: '0700'

- name: download Cloudflare dns hook
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/acmesh-official/acme.sh/master/dnsapi/dns_cf.sh
    dest: /opt/acme.sh/dnsapi/dns_cf.sh
    owner: root
    mode: '0700'

- name: register account with acme.sh
  ansible.builtin.command: "/opt/acme.sh/acme.sh --home /opt/acme.sh --server letsencrypt --register-account -m {{ acme_email }}"
  args:
    creates: /opt/acme.sh/ca

# AWS credentials are automatically saved.
- name: get certificate
  ansible.builtin.command: "/opt/acme.sh/acme.sh --home /opt/acme.sh --server letsencrypt --issue --dns dns_cf -d {{ nginx_domain }} --reloadcmd 'systemctl restart nginx.service'"
  args:
    creates: "/opt/acme.sh/{{ nginx_domain }}_ecc/ca.cer"
  environment:
    CF_Token: "{{ acme_cf_token }}"
    CF_Account_ID: "{{ acme_cf_account_id }}"
    CF_Zone_ID: "{{ acme_cf_zone_id }}"
  notify:
  - restart nginx

- name: add cron entry for acme.sh
  ansible.builtin.cron:
    name: "acme.sh"
    hour: 0
    minute: 0
    job: "/opt/acme.sh/acme.sh --cron --home /opt/acme.sh > /dev/null"
